
tests(master*)$ errstop() { [[ $1 -gt 0 ]] && { printf 'SCREENCAST STOP &'; read; }; }
tests(master*)$ date
Fri  5 Jun 16:56:11 BST 2020
tests(master*)$ alias mokbox='docker run --rm -ti --hostname mokbox --name mokbox -v /var/run/docker.sock:/var/run/dock
er.sock -v /var/tmp:/var/tmp myownkind/mokbox'
tests(master*)$ mokbox
[root@mokbox /]# retval=$?
[root@mokbox /]# errstop() { [[ $1 -gt 0 ]] && { printf 'SCREENCAST STOP &'; read; }; }
[root@mokbox /]# errstop $retval
[root@mokbox /]#
[root@mokbox /]# # Test 1 - download the prebuilt image and test
[root@mokbox /]#
[root@mokbox /]# mok -p build image --get-prebuilt-image
    Downloading base image, 'mok-centos-7-v1.18.3' .. SUCCESS
[root@mokbox /]# errstop $?
[root@mokbox /]# time mok -p create cluster myk8s --masters 1 --tailf
16500fc77d8f23b8daf4696312e7006a6fcd4f63f7a6d23350ff3743cc200a15

STATUS: OK

net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
W0605 15:56:26.512053     147 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kube
let.config.k8s.io kubeproxy.config.k8s.io]
[init] Using Kubernetes version: v1.18.3
[preflight] Running pre-flight checks
        [WARNING Swap]: running with swap on is not supported. Please disable swap
        [WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [myk8s-master-1 kubernetes kubernetes.default kubernetes.default
.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.17.0.3 172.17.0.3]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [myk8s-master-1 localhost] and IPs [172.17.0.3 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [myk8s-master-1 localhost] and IPs [172.17.0.3 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
W0605 15:56:31.602146     147 manifests.go:225] the default kube-apiserver authorization-mode is "Node,RBAC"; using "No
de,RBAC"
[control-plane] Creating static Pod manifest for "kube-scheduler"
W0605 15:56:31.605835     147 manifests.go:225] the default kube-apiserver authorization-mode is "Node,RBAC"; using "No
de,RBAC"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernete
s/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 30.004789 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.18" in namespace kube-system with the configuration for the kubelets i
n the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node myk8s-master-1 as control-plane by adding the label "node-role.kubernetes.io/mast
er=''"
[mark-control-plane] Marking the node myk8s-master-1 as control-plane by adding the taints [node-role.kubernetes.io/mas
ter:NoSchedule]
[bootstrap-token] Using token: abcdef.0123456789abcdef
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term
 certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Boot
strap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of control-plane nodes by copying certificate authorities
and service account keys on each node and then running the following as root:

  kubeadm join 172.17.0.3:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:90ae2fc174d124fa345e63c5fb92913dba5843750fc00f6dae13a64f77be1672 \
    --control-plane

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.17.0.3:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:90ae2fc174d124fa345e63c5fb92913dba5843750fc00f6dae13a64f77be1672
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 14366  100 14366    0     0  31154      0 --:--:-- --:--:-- --:--:-- 31162
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds-amd64 created
daemonset.apps/kube-flannel-ds-arm64 created
daemonset.apps/kube-flannel-ds-arm created
daemonset.apps/kube-flannel-ds-ppc64le created
daemonset.apps/kube-flannel-ds-s390x created
Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.ser
vice.
node/myk8s-master-1 untainted

STATUS: OK

Cluster, "myk8s", can be accessed using:

export KUBECONFIG=/var/tmp/admin-myk8s.conf

real    0m40.191s
user    0m0.368s
sys     0m0.279s
[root@mokbox /]# errstop $?
[root@mokbox /]# export KUBECONFIG=/var/tmp/admin-myk8s.conf
[root@mokbox /]# for i in `seq 1 20`; do if kubectl get pods &>/dev/null; then break; fi; echo -n "."; sleep 1; done
[root@mokbox /]# while kubectl get pods -A | tail -n +2 | awk '{ print $3; }' | grep -qs 0; do echo -n "."; sleep 2; do
ne; echo
......................
[root@mokbox /]# kubectl get pods -A
NAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE
kube-system   coredns-66bff467f8-7rwlj                 1/1     Running   0          39s
kube-system   coredns-66bff467f8-95l5t                 1/1     Running   0          39s
kube-system   etcd-myk8s-master-1                      1/1     Running   0          48s
kube-system   kube-apiserver-myk8s-master-1            1/1     Running   0          48s
kube-system   kube-controller-manager-myk8s-master-1   1/1     Running   0          48s
kube-system   kube-flannel-ds-amd64-mtqqc              1/1     Running   0          39s
kube-system   kube-proxy-crpmb                         1/1     Running   0          39s
kube-system   kube-scheduler-myk8s-master-1            1/1     Running   0          48s
[root@mokbox /]# errstop $?
[root@mokbox /]# kubectl run --rm -ti --restart=Never --image=alpine shell2 sh || errstop $?
If you don't see a command prompt, try pressing enter.
/ # ip address
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
3: eth0@if6: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1450 qdisc noqueue state UP
    link/ether 1a:be:bd:8d:51:24 brd ff:ff:ff:ff:ff:ff
    inet 10.244.0.4/24 brd 10.244.0.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::18be:bdff:fe8d:5124/64 scope link
       valid_lft forever preferred_lft forever
/ # apk add fortune
fetch http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.12/community/x86_64/APKINDEX.tar.gz
(1/2) Installing libbsd (0.10.0-r0)
(2/2) Installing fortune (0.1-r1)
 23% ##########################
Executing busybox-1.31.1-r16.trigger
ERROR: busybox-1.31.1-r16.trigger: script exited with error 127
OK: 9 MiB in 16 packages
/ # exit 0
pod "shell2" deleted
[root@mokbox /]# mok -p get cluster
MOK_Cluster  Docker_ID     Container_Name  IP_Address
myk8s        16500fc77d8f  myk8s-master-1  172.17.0.3
[root@mokbox /]# mok -p delete cluster myk8s || errstop $?
The following containers will be deleted:

MOK_Cluster  Docker_ID     Container_Name  IP_Address
myk8s        16500fc77d8f  myk8s-master-1  172.17.0.3

Are you sure you want to delete the cluster? (y/N) >y

    Deleting id, '16500fc77d8f' from cluster 'myk8s'. .. SUCCESS

[root@mokbox /]# mok -p get cluster
[root@mokbox /]# exit
exit
tests(master*)$
tests(master*)$ # Test complete
tests(master*)$ date
Fri  5 Jun 16:58:28 BST 2020
tests(master*)$
