#!/usr/bin/env bash

# ===========================================================================
# GLOBALS
# ===========================================================================
# Don't change any globals

# The initial state for the state machine
STATE="COMMAND"

ERROR=1
OK=0

COMMAND=
SUBCOMMAND=

CREATE_CLUSTER_NAME=
CREATE_CLUSTER_NUM_MASTERS=
CREATE_CLUSTER_NUM_WORKERS=

DELETE_CLUSTER_NAME=

# ===========================================================================
main() {
# ===========================================================================
# Execution begins here

  parse_options "$@"

  case "$COMMAND" in
    create) do_create ;;
    delete) do_delete ;;
  esac

  exit 0
}

# ---------------------------------------------------------------------------
do_create() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    cluster) do_create_cluster ;;
  esac
}

# ---------------------------------------------------------------------------
do_create_cluster() {
# ---------------------------------------------------------------------------
# Creates a mok cluster. All user vars have been parsed and saved.
# Globals: CREATE_CLUSTER_NAME CREATE_CLUSTER_NUM_MASTERS
#          CREATE_CLUSTER_NUM_WORKERS
# No args expected

  if [[ -z $CREATE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to create."
    exit $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_MASTERS || $CREATE_CLUSTER_NUM_MASTERS -le 0 ]]; then
    usage
    echo "Please provide the number of Masters to create. Must be 1 or more."
    exit $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_WORKERS ]]; then
    usage
    echo "Please provide the number of Workers to create."
    exit $ERROR
  fi

  # Create master node(s)

  # Create worker node(s)
}

# ---------------------------------------------------------------------------
do_delete() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function
# No args expected

  case $SUBCOMMAND in
    cluster) do_delete_cluster ;;
  esac
}

# ---------------------------------------------------------------------------
do_delete_cluster() {
# ---------------------------------------------------------------------------
# Deletes a mok cluster. All user vars have been parsed and saved.
# Globals: DELETE_CLUSTER_NAME
# No args expected

  if [[ -z $DELETE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to delete."
    exit $ERROR
  fi

  # Delete worker nodes

  # Delete master nodes
}

# ===========================================================================
# FUNCTIONS FOR PARSING THE COMMAND LINE BELOW
# ===========================================================================

# ---------------------------------------------------------------------------
parse_options() {
# ---------------------------------------------------------------------------
# Uses a state machine to check all command line arguments
# Args:
#   arg1 - The arguments given to mokctl by the user on the command line

  set -- "$@"
  local ARGN=$#
  while [ "$ARGN" -ne 0 ]
  do
    case $1 in
      -h) usage
          exit 0
      ;;
      ?*) case "$STATE" in
            COMMAND) check_command_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid COMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                   COMMAND="$1"
                 ;;
            SUBCOMMAND) check_subcommand_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid SUBCOMMAND for $COMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                   SUBCOMMAND="$1"
                 ;;
            OPTION) check_option_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                 ;;
            OPTION2) check_option2_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                 ;;
            OPTION3) check_option3_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                 ;;
            END) usage
                 echo -n "ERROR No more options expected, '$1' is unexpected"
                 echo " for '$COMMAND $SUBCOMMAND'"
                 exit $ERROR
                 ;;
            ?*) echo "Internal ERROR. Invalid state '$STATE'"
                exit $ERROR
          esac
      ;;
    esac
    shift 1
    ARGN=$((ARGN-1))
  done

  [[ -z $COMMAND ]] && {
    usage
    echo "No COMMAND supplied"
    exit $ERROR
  }
  [[ -z $SUBCOMMAND ]] && {
    usage
    echo "No SUBCOMMAND supplied"
    exit $ERROR
  }
}

# ---------------------------------------------------------------------------
check_command_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in command state
# Args:
#   arg1 - token

  case $1 in
    create) COMMAND=create
      ;;
    delete) COMMAND=delete
      ;;
    ?*) return $ERROR
      ;;
  esac
  STATE="SUBCOMMAND"
}

# ---------------------------------------------------------------------------
check_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $COMMAND in
    create) check_create_subcommand_token $1 ;;
    delete) check_delete_subcommand_token $1 ;;
  esac
}

# ---------------------------------------------------------------------------
check_create_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE="OPTION"

  return $OK
}

# ---------------------------------------------------------------------------
check_delete_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE=OPTION
}

# ---------------------------------------------------------------------------
check_option_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NAME="$1"
          STATE="OPTION2"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) DELETE_CLUSTER_NAME="$1"
          STATE="END"
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option2_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option2 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_MASTERS="$1"
          STATE="OPTION3"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option3_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option3 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_WORKERS="$1"
          STATE="END"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
usage() {
# ---------------------------------------------------------------------------
# Every tool, no matter how small, should have help text!

  echo
  echo "Usage: mokctl [-h] <COMMAND> <SUBCOMMAND> [SUBCOMMAND_OPTIONS...]"
  echo
  echo "Global options:"
  echo
  echo "  -h - This help text"
  echo
  echo "Where COMMAND can be one of:"
  echo
  echo "  create"
  echo "  delete"
  echo
  echo "create SUBCOMMANDs:"
  echo
  echo "  cluster - Create a local kubernetes cluster."
  echo
  echo "create cluster options:"
  echo
  echo " Format:"
  echo
  echo "  create cluster NAME NUM_MASTERS NUM_WORKERS"
  echo
  echo "  NAME        - The name of the cluster. This will be used as"
  echo "                the prefix in the name for newly created"
  echo "                docker containers."
  echo "  NUM_MASTERS - The number of master containers."
  echo "  NUM_WORKERS - The number of worker containers."
  echo
  echo "delete SUBCOMMANDs:"
  echo
  echo "  cluster - Create a local kubernetes cluster."
  echo
  echo "delete cluster options:"
  echo
  echo " Format:"
  echo
  echo "  delete cluster NAME"
  echo
  echo "  NAME        - The name of the cluster to delete"
  echo
  echo "EXAMPLES"
  echo
  echo "Create a single node cluster:"
  echo "Note that the master node will be made schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 0"
  echo
  echo "Create a single master and single node cluster:"
  echo "Note that the master node will NOT be schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 1"
  echo
  echo "Delete a cluster:"
  echo
  echo "  mokctl delete cluster mycluster"
  echo
}

if ([ "$0" = "$BASH_SOURCE" ] || ! [ -n "$BASH_SOURCE" ]);
then
  main "$@"
fi

# vim:ft=bash:sw=2:et:ts=2:
