#!/usr/bin/env bash

# ===========================================================================
# GLOBALS
# ===========================================================================
# Don't change any globals

# Constants
declare -r LABELKEY="MokCluster"
declare -r BASEIMAGENAME="mok-centos-7"
declare -r ERROR=1
declare -r OK=0
declare -r TRUE=1
declare -r FALSE=0
declare -r SPINNER=('◐' '◓' '◑' '◒')

colgreen=`tput setaf 2`
colred=`tput setaf 1`
colreset=`tput sgr0`
success="$colgreen✓$colreset"
failure="$colred✕$colreset"

# The initial state of the parser
STATE="COMMAND"

# Parser sets these:
COMMAND=
SUBCOMMAND=
CREATE_CLUSTER_NAME=
CREATE_CLUSTER_K8SVER=
CREATE_CLUSTER_NUM_MASTERS=0
CREATE_CLUSTER_NUM_WORKERS=0
CREATE_CLUSTER_SKIPMASTERSETUP=$FALSE
CREATE_CLUSTER_SKIPWORKERSETUP=$FALSE
DELETE_CLUSTER_NAME=
GET_CLUSTER_NAME=

# Directory to unpack the build files
DOCKERBUILDTMPDIR=

# For the spinning progress animation
RUNWITHPROGRESS_OUTPUT=

# ===========================================================================
main() {
# ===========================================================================
# Execution begins here

  trap cleanup EXIT

  set_globals || return

  sanity_checks || return

  parse_options "$@" || return

  case "$COMMAND" in
    create) do_create ;;
    delete) do_delete ;;
    build)  do_build  ;;
    get)    do_get    ;;
  esac
}

# ---------------------------------------------------------------------------
set_globals() {
# ---------------------------------------------------------------------------

  COMMAND=
  SUBCOMMAND=
  CREATE_CLUSTER_NAME=
  CREATE_CLUSTER_K8SVER=
  CREATE_CLUSTER_NUM_MASTERS=
  CREATE_CLUSTER_NUM_WORKERS=
  CREATE_CLUSTER_SKIPMASTERSETUP=$FALSE
  CREATE_CLUSTER_SKIPWORKERSETUP=$FALSE
  DELETE_CLUSTER_NAME=
  GET_CLUSTER_NAME=
}

# ===========================================================================
# MOKCTL GET
# ===========================================================================

# ---------------------------------------------------------------------------
do_get() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    cluster)  do_get_clusters_sanity_checks || return
              do_get_clusters_nomutate "$GET_CLUSTER_NAME"
              ;;
  esac
}

# ---------------------------------------------------------------------------
do_get_clusters_sanity_checks() {
# ---------------------------------------------------------------------------
# No sanity checks required.
# Globals: None
# No args expected

  :
}

# ===========================================================================
# MOKCTL BUILD
# ===========================================================================

# ---------------------------------------------------------------------------
do_build() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    image) do_build_image_sanity_checks || return
           do_build_image_mutate
           ;;
  esac
}

# ---------------------------------------------------------------------------
do_build_image_sanity_checks() {
# ---------------------------------------------------------------------------
# No sanity checks required.
# Globals: None
# No args expected

  :
}

# ===========================================================================
# MOKCTL CREATE
# ===========================================================================

# ---------------------------------------------------------------------------
do_create() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    cluster) do_create_cluster_sanity_checks || return
             do_create_cluster_mutate
             ;;
  esac
}

# ---------------------------------------------------------------------------
do_create_cluster_sanity_checks() {
# ---------------------------------------------------------------------------
# Creates a mok cluster. All user vars have been parsed and saved.
# Globals: CREATE_CLUSTER_NAME CREATE_CLUSTER_NUM_MASTERS
#          CREATE_CLUSTER_NUM_WORKERS
# No args expected

  if [[ -z $CREATE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to create."
    return $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_MASTERS || $CREATE_CLUSTER_NUM_MASTERS -le 0 ]]; then
    usage
    echo "Please provide the number of Masters to create. Must be 1 or more."
    return $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_WORKERS ]]; then
    usage
    echo "Please provide the number of Workers to create."
    return $ERROR
  fi
}

# ===========================================================================
# MOKCTL DELETE
# ===========================================================================

# ---------------------------------------------------------------------------
do_delete() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function
# No args expected

  case $SUBCOMMAND in
    cluster) do_delete_cluster_sanity_checks || return
             do_delete_cluster_mutate
             ;;
  esac
}

# ---------------------------------------------------------------------------
do_delete_cluster_sanity_checks() {
# ---------------------------------------------------------------------------
# Deletes a mok cluster. All user vars have been parsed and saved.
# Globals: DELETE_CLUSTER_NAME
# No args expected

  if [[ -z $DELETE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to delete."
    return $ERROR
  fi
}

# ===========================================================================
#                                MUTATIONS
#                FUNCTIONS IN THIS SECTION CHANGE SYSTEM STATE
# ===========================================================================

# ---------------------------------------------------------------------------
do_create_cluster_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.
# Global variables:
#   CREATE_CLUSTER_NAME        - (string) cluster name
#   CREATE_CLUSTER_NUM_MASTERS - (int) num masters
#   CREATE_CLUSTER_NUM_WORKERS - (int) num workers

  declare -i numnodes=0

  numnodes=$(get_cluster_size $CREATE_CLUSTER_NAME) || return

  [[ $numnodes -gt 0 ]] && {
    echo
    echo "ERROR: Cluster, '$CREATE_CLUSTER_NAME', exists! Aborting."
    echo
    return $ERROR
  }

  echo

  [[ $CREATE_CLUSTER_NUM_MASTERS -gt 0 ]] && {
    create_master_nodes $CREATE_CLUSTER_NUM_MASTERS || return
  }

  # TODO Query the server for all pods ready instead
  run_with_progress \
    "    Waiting for master to be ready." \
    sleep 90

  [[ $CREATE_CLUSTER_NUM_WORKERS -gt 0 ]] && {
    create_worker_nodes "$CREATE_CLUSTER_NUM_WORKERS" || return
  }

  echo
  echo "Cluster, '$CREATE_CLUSTER_NAME', can be accessed using:"
  echo
  echo "export KUBECONFIG=~/.mok/admin.conf"
  echo

  return $OK
}

# ---------------------------------------------------------------------------
get_cluster_size() {
# ---------------------------------------------------------------------------
# Search for an existing cluster using labels. All cluster nodes are
# labelled with $LABELKEY=$CREATE_CLUSTER_NAME
# Args:
#   arg1 - name to search for.

  local output
  declare -a nodes

  output=$(get_docker_ids_for_cluster $1) || return

  # read the nodes array and delete blank lines
  readarray nodes < <(echo "$output" | sed '/^$/d')

  echo "${#nodes[*]}"
}

# ---------------------------------------------------------------------------
get_docker_ids_for_cluster() {
# ---------------------------------------------------------------------------
# Get all cluster ids for labelled containers
# Args:
#   arg1 - Cluster name

  local value output

  [[ -n $1 ]] && value="=$1"

  output=$(docker ps -a -f label=$LABELKEY$value -q) || {
    echo -e "ERROR: Docker command failed\n" >/dev/stderr
    return $ERROR
  }

  echo "$output"

  return $OK
}

# ---------------------------------------------------------------------------
create_master_nodes() {
# ---------------------------------------------------------------------------
# Create the master nodes
# Args:
#   arg1 - number of master nodes to create

  local retval=0
  declare -i i=0

  for i in $(seq 1 $1); do
    run_with_progress \
      "    Creating base container, '$CREATE_CLUSTER_NAME-master-$i'" \
      create_docker_container \
        "$CREATE_CLUSTER_NAME-master-$i" \
        "$LABELKEY=$CREATE_CLUSTER_NAME"
    [[ $? -ne 0 ]] && {
      echo
      cat $RUNWITHPROGRESS_OUTPUT
      rm $RUNWITHPROGRESS_OUTPUT
      echo
      echo "ERROR: Docker failed."
      return $ERROR
    }
    run_with_progress \
      "    Setting up '$CREATE_CLUSTER_NAME-master-$i'" \
      set_up_master_node "$CREATE_CLUSTER_NAME-master-$i"
    [[ $? -ne 0 ]] && {
      echo
      cat $RUNWITHPROGRESS_OUTPUT
      echo
      echo "ERROR: Set up failed. See above, and also in the file:"
      echo "$RUNWITHPROGRESS_OUTPUT"
      return $ERROR
    }
  done

  # For now, copy admin.conf from master to ~/.mok/admin.conf

  mkdir -p ~/.mok/
  docker cp "$CREATE_CLUSTER_NAME-master-$i":/etc/kubernetes/admin.conf \
    ~/.mok/admin.conf

  return $OK
}

# ---------------------------------------------------------------------------
create_docker_container() {
# ---------------------------------------------------------------------------
# Runs a new container with docker run.
# Args:
#   arg1 - name to use as the name and hostname.
#   arg2 - the label to write to the container.

  docker run --privileged \
      -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
      -v /lib/modules:/lib/modules:ro \
      --tmpfs /run --tmpfs /tmp \
      --detach \
      --name $1 \
      --hostname $1 \
      --label $2 \
      local/$BASEIMAGENAME
}

# ---------------------------------------------------------------------------
create_worker_nodes() {
# ---------------------------------------------------------------------------
# Create the master nodes
# Args:
#   arg1 - number of master nodes to create

  local retval=0 cahash token ip t
  declare -i i=0

  # Runs a script on master node to get details
  t=$(get_master_join_details $CREATE_CLUSTER_NAME-master-1) || {
    echo -e "\nERROR: Problem with 'get_master_join_details'.\n"
    return $ERROR
  }

  # Sets cahash, token, and masterip:
  eval $t

  for i in $(seq 1 $1); do
    run_with_progress \
      "    Creating base container, '$CREATE_CLUSTER_NAME-worker-$i'" \
      create_docker_container \
        "$CREATE_CLUSTER_NAME-worker-$i" \
        "$LABELKEY=$CREATE_CLUSTER_NAME"
    [[ $? -ne 0 ]] && {
      echo
      cat $RUNWITHPROGRESS_OUTPUT
      rm $RUNWITHPROGRESS_OUTPUT
      echo
      echo "ERROR: Docker failed."
      return $ERROR
    }
    run_with_progress \
      "    Setting up '$CREATE_CLUSTER_NAME-worker-$i'" \
      set_up_worker_node "$CREATE_CLUSTER_NAME-worker-$i" \
        "$cahash" "$token" "$masterip"
    [[ $? -ne 0 ]] && {
      echo
      cat $RUNWITHPROGRESS_OUTPUT
      echo
      echo "ERROR: Set up failed. See above, and also in the file:"
      echo "$RUNWITHPROGRESS_OUTPUT"
      return $ERROR
    }
  done

  return $OK
}

# ---------------------------------------------------------------------------
get_master_join_details(){
# ---------------------------------------------------------------------------
# 'docker exec' into the master to get CA hash, a token, and the master IP.
# The caller can eval the output of this function to set the variables:
# cahash, token, and masterip.
# Args:
#   arg1 - id/name of master container

  local joinvarsfile=`mktemp --tmpdir=/var/tmp`

  cat <<'EnD' >$joinvarsfile
#!/bin/bash
set -e

cahash=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
        openssl rsa -pubin -outform der 2>/dev/null | \
        openssl dgst -sha256 -hex | sed 's/^.* //')
token=$(kubeadm token create --kubeconfig=/etc/kubernetes/admin.conf 2>/dev/null)
ip=$(ip ro get 8.8.8.8 | cut -d" " -f 7)

echo "cahash=$cahash"
echo "token=$token"
echo "masterip=$ip"

exit 0
EnD

  docker cp $joinvarsfile $1:/root/joinvars.sh || return
  rm -f $joinvarsfile

  docker exec $1 bash /root/joinvars.sh
}

# ---------------------------------------------------------------------------
set_up_master_node() {
# ---------------------------------------------------------------------------
# Use kubeadm to set up the master node.
# Args:
#   arg1 - the container to set up.

  local setupfile=`mktemp --tmpdir=/var/tmp`

  cat <<'EnD' >$setupfile
# Disable ipv6
sysctl -w net.ipv6.conf.all.disable_ipv6=1
sysctl -w net.ipv6.conf.default.disable_ipv6=1

# Run the preflight phase
kubeadm init \
  --ignore-preflight-errors Swap \
  phase preflight

# Set up the kubelet
kubeadm init phase kubelet-start

# Edit the kubelet configuration file
echo "failSwapOn: false" >>/var/lib/kubelet/config.yaml

# Tell kubeadm to carry on from here
kubeadm init \
  --pod-network-cidr=10.244.0.0/16 \
  --ignore-preflight-errors Swap \
  --skip-phases=preflight,kubelet-start

declare -i i=120
while [[ $((i--)) -gt 0 ]]; do
  curl -k https://localhost:6443/api/ && break
  sleep 1
done

export KUBECONFIG=/etc/kubernetes/admin.conf

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml
EnD

  docker cp $setupfile $1:/root/setup.sh
  rm -f $setupfile

  docker exec $1 bash /root/setup.sh
}

# ---------------------------------------------------------------------------
set_up_worker_node() {
# ---------------------------------------------------------------------------
# Use kubeadm to set up the master node
# Args:
#   arg1 - the container to set up.

  local setupfile=`mktemp --tmpdir=/var/tmp`
  local cahash=$2 token=$3 masterip=$4

  cat <<EnD >$setupfile
# Wait for the master API to become ready
while true; do
  curl -k https://$masterip:6443/
  [[ \$? -eq 0 ]] && break
  sleep 1
done

# Do the preflight tests (ignoring swap error)
kubeadm join \
  phase preflight \
    --token $token \
      --discovery-token-ca-cert-hash sha256:$cahash \
        --ignore-preflight-errors Swap \
          $masterip:6443

# Set up the kubelet
kubeadm join \
  phase kubelet-start \
    --token $token \
      --discovery-token-ca-cert-hash sha256:$cahash \
        $masterip:6443 &

while true; do
  [[ -e /var/lib/kubelet/config.yaml ]] && break
    sleep 1
  done

# Edit the kubelet configuration file
echo "failSwapOn: false" >>/var/lib/kubelet/config.yaml

systemctl restart kubelet
EnD

  docker cp $setupfile $1:/root/setup.sh
  rm -f $setupfile

  docker exec $1 bash /root/setup.sh
}

# ---------------------------------------------------------------------------
do_delete_cluster_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.

  declare -i numnodes=0

  numnodes=$(get_cluster_size $DELETE_CLUSTER_NAME) || return

  [[ $numnodes -eq 0 ]] && {
    echo -en "\nERROR: No cluster exists with name, '$DELETE_CLUSTER_NAME'."
    echo -e " Aborting.\n"
    return $ERROR
  }

  delete_cluster_nodes $DELETE_CLUSTER_NAME
}

# ---------------------------------------------------------------------------
delete_cluster_nodes() {
# ---------------------------------------------------------------------------
# Delete all cluster nodes.
# Args:
#   arg1 - Name of the cluster to delete

  local id ids r

  ids=$(get_docker_ids_for_cluster $1) || return

  echo -e "The following containers will be deleted:\n"

  do_get_clusters_nomutate $1

  echo -en "\nAre you sure you want to delete the cluster? (y/N) >"

  read ans

  [[ "$ans" != "y" ]] && {
    echo -e "\nCancelling by user request."
    return $OK
  }

  echo

  for id in $ids; do
    run_with_progress \
      "    Deleting id, '$id' from cluster '$1'." \
      delete_docker_container $id
      r=$?
      [[ $r -ne 0 ]] && {
        cat "$RUNWITHPROGRESS_OUTPUT"
        echo -e "\nERROR: Docker failed.\n"
        return $r
      }
  done

  echo
}

# ---------------------------------------------------------------------------
delete_docker_container() {
# ---------------------------------------------------------------------------
# Stops and removes docker container.
# Args:
#   arg1 - docker id to delete

  docker stop $id || return
  docker rm $id || return
}

# ---------------------------------------------------------------------------
do_build_image_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.
# Builds the $BASEIMAGENAME base image used for masters and workers.
# Globals: None
# No args expected

  local retval=0

  build_container_image
  retval=$?

  if [[ $retval -eq 0 ]]; then
    : # We only need the tick - no text
  else
    echo "Image build failed"
  fi

  return $retval
}

# ---------------------------------------------------------------------------
build_container_image() {
# ---------------------------------------------------------------------------
# Creates the docker build directory in $DOCKERBUILDTMPDIR then calls
# docker build to build the image.
# No args expected.

  local retval

  create_docker_build_dir

  run_with_progress \
      "    Creating base image, '$BASEIMAGENAME'" \
      docker build -t "local/$BASEIMAGENAME" "$DOCKERBUILDTMPDIR/$BASEIMAGENAME"

  retval=$?
  [[ $retval -ne 0 ]] && {
    echo "ERROR: Docker returned an error, shown below"
    echo
    cat $RUNWITHPROGRESS_OUTPUT
    echo
    return $ERROR
  }

  return $retval
}

# ---------------------------------------------------------------------------
create_docker_build_dir() {
# ---------------------------------------------------------------------------
# Creates a docker build directory in /var/tmp/tmp.XXXXXXXX
# No args expected

  DOCKERBUILDTMPDIR=`mktemp -d --tmpdir=/var/tmp`

  # The following comments should not be removed or changed.
  # embed-dockerfile.sh adds a base64 encoded tarball and
  #  unpacking code between them.

  #mok-centos-7-tarball-start
  #mok-centos-7-tarball-end
}

# ===========================================================================
#                              NON-MUTATORS
# ===========================================================================

# ---------------------------------------------------------------------------
do_get_clusters_nomutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes but this one doesn't and I don't
#  know where to put it yet.
# Gets cluster details
# Globals: None
# Args
#   arg1 - cluster name, optional

  local ids id info output clustname=$1
  local containerhostname containerip

  declare -a nodes

  [[ -n $clustname ]] && clustname="=$clustname"

  ids=$(get_mok_cluster_docker_ids "$clustname") || return

  if [[ -z $ids ]]; then
    return $OK
  fi

  readarray nodes <<<$ids

  # Use 'docker inspect' to get the value of the label $LABELKEY

  ( echo "MOK_Cluster Docker_ID Container_Name IP_Address"
  for id in ${nodes[@]}; do
    info=$(get_info_about_container_using_docker $id) || return
    clustname=$(sed -rn \
      '/Labels/,/}/ {s/[":,]//g; s/^ *'"$LABELKEY"' ([^ ]*).*/\1/p }' \
      <<<$info)
    containerhostname=$(sed -rn \
      '/"Config"/,/}/ {s/[":,]//g; s/^ *Hostname ([^ ]*).*/\1/p }' \
      <<<$info)
    containerip=$(sed -rn \
      '/NetworkSettings/,/Networks/ {s/[":,]//g; s/^ *IPAddress ([^ ]*).*/\1/p }' \
      <<<$info)
    echo "$clustname $id $containerhostname $containerip"
  done ) | column -t
}

# ---------------------------------------------------------------------------
get_mok_cluster_docker_ids() {
# ---------------------------------------------------------------------------
# Use 'docker ps .. label= ..' to get a list of mok clusters
# Args
#   arg1 - mok cluster name, optional

  docker ps -a -f label=$LABELKEY$1 -q || {
    echo "ERROR: docker failed\n" >/dev/stderr
    return $ERROR
  }
}

# ---------------------------------------------------------------------------
get_info_about_container_using_docker() {
# ---------------------------------------------------------------------------
# Use 'docker inspect $id' to get details about container $id
# Args
#   arg1 - docker container id

  docker inspect $1 || {
    echo -e "\nERROR: docker failed\n" >/dev/stderr
    return $ERROR
  }
}

# ===========================================================================
#                                 HELPERS
# ===========================================================================

# ---------------------------------------------------------------------------
run_with_progress() {
# ---------------------------------------------------------------------------
# Display a progress spinner, display item text, display a tick or cross
# based on the exit code.
# Args:
#   arg1 - the text to display
#   argN - remaining args are the program and its arguments

  local displaytext=$1 retval i

  RUNWITHPROGRESS_OUTPUT=`mktemp --tmpdir=/var/tmp`

  shift
  # Run the command in the background
  $@ &>$RUNWITHPROGRESS_OUTPUT &
  # Turn the cursor off
  tput civis

  # Start the spin animation
  echo -n "$displaytext"
  ( while true; do
    for i in {0..3}; do
      echo -en "\r  ${SPINNER[i]} "
      sleep .1
    done
  done ) &

  # Wait for the command to finish
  wait %1
  retval=$?

  # Kill the spinner
  kill %2

  # Mark success/fail
  if [[ $retval -eq 0 ]]; then
    echo -e "\r  $success"
  else
    echo -e "\r  $failure"
  fi

  # Restore the cursor
  tput cnorm

  return $retval
}

# ---------------------------------------------------------------------------
sanity_checks(){
# ---------------------------------------------------------------------------
# Check our environment
# No args expected

  local binary

  for binary in column tput docker grep sed; do
    if ! which $binary >& /dev/null; then
      echo "ERROR: $binary binary not found in path. Aborting."
      return 1
    fi
  done

  # Disable terminal escapes (colours) if stdout is not a terminal
  [ -t 1 ] || {
    colgreen=
    colred=
    colreset=
    success="✓"
    failure="✕"
  }
}

# ---------------------------------------------------------------------------
usage() {
# ---------------------------------------------------------------------------
# Every tool, no matter how small, should have help text!

  case $COMMAND in
    create) create_command_help; return $OK ;;
    delete) delete_command_help; return $OK ;;
    build) build_command_help; return $OK ;;
    get) get_command_help; return $OK ;;
  esac

  echo
  echo "Usage: mokctl [-h] <COMMAND> <SUBCOMMAND> [SUBCOMMAND_OPTIONS...]"
  echo
  echo "Global options:"
  echo
  echo "  --help"
  echo "  -h     - This help text"
  echo
  echo "Where COMMAND can be one of:"
  echo
  echo "  create - Add item(s) to the system."
  echo "  delete - Delete item(s) from the system."
  echo "  build  - Build item(s) used by the system."
  echo "  get    - Get details about items in the system."
  echo

  create_command_help
  delete_command_help
  build_command_help
  get_command_help

  echo "EXAMPLES"
  echo
  echo "Get a list of mok clusters"
  echo
  echo "  mokctl get clusters"
  echo
  echo "Build the image used for masters and workers:"
  echo
  echo "  mokctl build image"
  echo
  echo "Create a single node cluster:"
  echo "Note that the master node will be made schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 0"
  echo
  echo "Create a single master and single node cluster:"
  echo "Note that the master node will NOT be schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 1"
  echo
  echo "Delete a cluster:"
  echo
  echo "  mokctl delete cluster mycluster"
  echo
}

# ---------------------------------------------------------------------------
create_command_help() {
# ---------------------------------------------------------------------------
  echo "create SUBCOMMANDs are:"
  echo
  echo "  cluster - Create a local kubernetes cluster."
  echo
  echo "create cluster [flags] options:"
  echo
  echo " Format:"
  echo "  create cluster NAME NUM_MASTERS NUM_WORKERS"
  echo "  NAME        - The name of the cluster. This will be used as"
  echo "                the prefix in the name for newly created"
  echo "                docker containers."
  echo "  NUM_MASTERS - The number of master containers."
  echo "  NUM_WORKERS - The number of worker containers."
  echo
  echo " Flags:"
  echo "  --skipmastersetup - Create the master container but don't set it"
  echo "         up. Useful for manually installing kubernetes. Kubeadm, "
  echo "         kubelet and kubectl will be installed at the requested "
  echo "         version. See also '--k8sver' flag."
  echo "  --skipworkersetup - The same as '--skipmastersetup', but skips"
  echo "         setting up the worker."
  echo "  --k8sver VERSION - Unimplemented."
  echo
}

# ---------------------------------------------------------------------------
delete_command_help() {
# ---------------------------------------------------------------------------
  echo "delete SUBCOMMANDs are:"
  echo
  echo "  cluster - Delete a local kubernetes cluster."
  echo
  echo "delete cluster options:"
  echo
  echo " Format:"
  echo "  delete cluster NAME"
  echo "  NAME        - The name of the cluster to delete"
  echo
}

# ---------------------------------------------------------------------------
build_command_help() {
# ---------------------------------------------------------------------------
  echo "build SUBCOMMANDs are:"
  echo
  echo "  image - Creates the $BASEIMAGENAME base image."
  echo
  echo "build image options:"
  echo
  echo " Format:"
  echo "  build image"
  echo
}

# ---------------------------------------------------------------------------
get_command_help() {
# ---------------------------------------------------------------------------
  echo "get SUBCOMMANDs are:"
  echo
  echo "  cluster(s) - list all mokctl managed clusters."
  echo
  echo "get cluster(s) options:"
  echo
  echo " Format:"
  echo "  get cluster(s) [NAME]"
  echo "  NAME        - (optional) The name of the cluster to get"
  echo "                details about."
  echo
}

# ---------------------------------------------------------------------------
cleanup() {
# ---------------------------------------------------------------------------
# Called when the script exits.

  local i

  [[ -e "$DOCKERBUILDTMPDIR" ]] && \
    [[ $DOCKERBUILDTMPDIR == "/var/tmp/"* ]] && {
    rm -rf "$DOCKERBUILDTMPDIR"
  }

  # If progress spinner crashed make sure the cursor is shown
  [ -t 1 ] && tput cnorm

  # Kill the spinny, and anything else, if they're running
  [[ -n `jobs -p` ]] &&  echo -e "$colred\r  ✕$colreset"
  for i in `jobs -p`; do kill $i; done
  
  return $OK
}

# ===========================================================================
#                   FUNCTIONS FOR PARSING THE COMMAND LINE
# ===========================================================================

# ---------------------------------------------------------------------------
parse_options() {
# ---------------------------------------------------------------------------
# Uses a state machine to check all command line arguments
# Args:
#   arg1 - The arguments given to mokctl by the user on the command line

  set -- "$@"
  local ARGN=$#
  while [ "$ARGN" -ne 0 ]
  do
    case $1 in
      --skipmastersetup) verify_option '--skipmastersetup' || return $ERROR
                         CREATE_CLUSTER_SKIPMASTERSETUP=$TRUE
                         ;;
      --skipworkersetup) verify_option '--skipmastersetup' || return $ERROR
                         CREATE_CLUSTER_SKIPWORKERSETUP=$TRUE
                         ;;
      --k8sver) verify_option '--k8sver' || return $ERROR
                         CREATE_CLUSTER_K8SVER=$1
                         shift
                         ;;
      --help) ;&
      -h) usage
          return $ERROR
      ;;
      --?*) usage
            echo "Invalid option: '$1'"
            return $ERROR
      ;;
      ?*) case "$STATE" in
            COMMAND) check_command_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid COMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            SUBCOMMAND) check_subcommand_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid SUBCOMMAND for $COMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            OPTION) check_option_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            OPTION2) check_option2_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            OPTION3) check_option3_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            END) usage
                 echo -n "ERROR No more options expected, '$1' is unexpected"
                 echo " for '$COMMAND $SUBCOMMAND'"
                 return $ERROR
                 ;;
            ?*) echo "Internal ERROR. Invalid state '$STATE'"
                return $ERROR
          esac
      ;;
    esac
    shift 1
    ARGN=$((ARGN-1))
  done

  [[ -z $COMMAND ]] && {
    usage
    echo "No COMMAND supplied"
    return $ERROR
  }
  [[ -z $SUBCOMMAND ]] && {
    usage
    echo "No SUBCOMMAND supplied"
    return $ERROR
  }

  return $OK
}

# ===========================================================================
#                    COMMAND, SUBCOMMAND, OPTION PROCESSING
# ===========================================================================

# ---------------------------------------------------------------------------
check_command_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in command state
# Args:
#   arg1 - token

  case $1 in
    create) COMMAND=create ;;
    delete) COMMAND=delete ;;
    build)  COMMAND=build  ;;
    get)    COMMAND=get    ;;
    ?*)     return $ERROR  ;;
  esac
  STATE="SUBCOMMAND"
}

# ---------------------------------------------------------------------------
check_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $COMMAND in
    create) check_create_subcommand_token $1 ;;
    delete) check_delete_subcommand_token $1 ;;
    build)  check_build_subcommand_token $1  ;;
    get)    check_get_subcommand_token $1    ;;
  esac
}

# ---------------------------------------------------------------------------
check_create_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster" ;;
    ?*) return $ERROR ;;
  esac

  STATE="OPTION"

  return $OK
}

# ---------------------------------------------------------------------------
check_delete_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster" ;;
    ?*) return $ERROR ;;
  esac

  STATE=OPTION
}

# ---------------------------------------------------------------------------
check_build_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    image) SUBCOMMAND="image" ;;
    ?*) return $ERROR ;;
  esac

  STATE=END
}

# ---------------------------------------------------------------------------
check_get_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    clusters) ;&
    cluster) SUBCOMMAND="cluster" ;;
    ?*) return $ERROR ;;
  esac

  STATE=OPTION
}

# ---------------------------------------------------------------------------
check_option_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NAME="$1"
          STATE="OPTION2"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) DELETE_CLUSTER_NAME="$1"
          STATE="END"
          ;;
      esac
      ;;
    get)
      case $SUBCOMMAND in
        cluster) GET_CLUSTER_NAME="$1"
          STATE="END"
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option2_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option2 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_MASTERS="$1"
          STATE="OPTION3"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option3_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option3 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_WORKERS="$1"
          STATE="END"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ===========================================================================
#                              FLAG PROCESSING
# ===========================================================================

# ---------------------------------------------------------------------------
verify_option() {
# ---------------------------------------------------------------------------
# Check that the sent option is valid for the command-subcommand or global
# options.
# Args:
#   arg1 - The option to check.

  case "$COMMAND$SUBCOMMAND" in
    create) ;& # Treat flags located just before
    delete) ;& # or just after COMMAND
    build) ;&  # as global options.
    get) ;&
    '') check_valid_global_opts $1
      ;;
    createcluster) check_valid_create_cluster_opts $1
      ;;
    deletecluster) check_valid_delete_cluster_opts $1
      ;;
    buildimage) check_valid_build_image_opts $1
      ;;
    getcluster) check_valid_get_cluster_opts $1
      ;;
  esac && return $OK

  return $ERROR
}

# ---------------------------------------------------------------------------
check_valid_global_opts() {
# ---------------------------------------------------------------------------
# Args:
#   arg1 - The option to check.

  local i validopts=(
    "--help"
    "-h"
  )

  for i in ${validopts[@]}; do
    [[ "$1" == "$i" ]] && return $OK
  done

  usage
  echo "ERROR: '$1' is not a valid global option."
  return $ERROR
}

# ---------------------------------------------------------------------------
check_valid_create_cluster_opts() {
# ---------------------------------------------------------------------------
# Args:
#   arg1 - The option to check.

  local i validopts=(
    "--skipmastersetup"
    "--skipworkersetup"
    "--k8sver"
  )

  for i in ${validopts[@]}; do
    [[ "$1" == "$i" ]] && return $OK
  done

  usage
  echo "ERROR: '$1' is not a valid 'create cluster' option."
  return $ERROR
}

# ---------------------------------------------------------------------------
check_valid_delete_cluster_opts() {
# ---------------------------------------------------------------------------
# Args:
#   arg1 - The option to check.

  local i validopts=(
  )

  for i in ${validopts[@]}; do
    [[ "$1" == "$i" ]] && return $OK
  done

  usage
  echo "ERROR: '$1' is not a valid 'delete cluster' option."
  return $ERROR
}

# ---------------------------------------------------------------------------
check_valid_build_image_opts() {
# ---------------------------------------------------------------------------
# Args:
#   arg1 - The option to check.

  local i validopts=(
  )

  for i in ${validopts[@]}; do
    [[ "$1" == "$i" ]] && return $OK
  done

  usage
  echo "ERROR: '$1' is not a valid 'build image' option."
  return $ERROR
}

# ---------------------------------------------------------------------------
check_valid_get_cluster_opts() {
# ---------------------------------------------------------------------------
# Args:
#   arg1 - The option to check.

  local i validopts=(
  )

  for i in ${validopts[@]}; do
    [[ "$1" == "$i" ]] && return $OK
  done

  usage
  echo "ERROR: '$1' is not a valid 'get cluster' option."
  return $ERROR
}

# Calls main() if we're called from the command line
if ([ "$0" = "$BASH_SOURCE" ] || ! [ -n "$BASH_SOURCE" ]);
then
  main "$@"
fi

# vim:ft=bash:sw=2:et:ts=2:
