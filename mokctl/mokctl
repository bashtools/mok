#!/usr/bin/env bash

# ===========================================================================
# GLOBALS
# ===========================================================================
# Don't change any globals

# The initial state of the parser
STATE="COMMAND"

# Parser sets these:
COMMAND=
SUBCOMMAND=
CREATE_CLUSTER_NAME=
declare -i CREATE_CLUSTER_NUM_MASTERS=
declare -i CREATE_CLUSTER_NUM_WORKERS=
DELETE_CLUSTER_NAME=
GET_CLUSTER_NAME=

# Directory to unpack the build files
DOCKERBUILDTMPDIR=

# For the spinning progress animation
RUNWITHPROGRESS_OUTPUT=

# Constants
declare -r LABELKEY="MokCluster"
declare -r BASEIMAGENAME="mok-centos-7"
declare -r ERROR=1
declare -r OK=0
declare -r SPINNER=('◐' '◓' '◑' '◒')
declare -r colgreen=`tput setaf 2`
declare -r colred=`tput setaf 1`
declare -r colreset=`tput sgr0`
declare -r success="$colgreen✓$colreset"
declare -r failure="$colred✕$colreset"

# ===========================================================================
main() {
# ===========================================================================
# Execution begins here

  trap cleanup EXIT

  sanity_checks || return $?

  parse_options "$@" || return $?

  case "$COMMAND" in
    create) do_create ;;
    delete) do_delete ;;
    build)  do_build  ;;
    get)    do_get    ;;
  esac
}

# ===========================================================================
# MOKCTL GET
# ===========================================================================

# ---------------------------------------------------------------------------
do_get() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    cluster)  do_get_clusters_sanity_checks || return $?
              do_get_clusters_nomutate "$GET_CLUSTER_NAME"
              ;;
  esac
}

# ---------------------------------------------------------------------------
do_get_clusters_sanity_checks() {
# ---------------------------------------------------------------------------
# No sanity checks required.
# Globals: None
# No args expected

  :
}

# ===========================================================================
# MOKCTL BUILD
# ===========================================================================

# ---------------------------------------------------------------------------
do_build() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    image) do_build_image_sanity_checks || return $?
           do_build_image_mutate
           ;;
  esac
}

# ---------------------------------------------------------------------------
do_build_image_sanity_checks() {
# ---------------------------------------------------------------------------
# No sanity checks required.
# Globals: None
# No args expected

  :
}

# ===========================================================================
# MOKCTL CREATE
# ===========================================================================

# ---------------------------------------------------------------------------
do_create() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    cluster) do_create_cluster_sanity_checks || return $?
             do_create_cluster_mutate
             ;;
  esac
}

# ---------------------------------------------------------------------------
do_create_cluster_sanity_checks() {
# ---------------------------------------------------------------------------
# Creates a mok cluster. All user vars have been parsed and saved.
# Globals: CREATE_CLUSTER_NAME CREATE_CLUSTER_NUM_MASTERS
#          CREATE_CLUSTER_NUM_WORKERS
# No args expected

  if [[ -z $CREATE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to create."
    return $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_MASTERS || $CREATE_CLUSTER_NUM_MASTERS -le 0 ]]; then
    usage
    echo "Please provide the number of Masters to create. Must be 1 or more."
    return $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_WORKERS ]]; then
    usage
    echo "Please provide the number of Workers to create."
    return $ERROR
  fi
}

# ===========================================================================
# MOKCTL DELETE
# ===========================================================================

# ---------------------------------------------------------------------------
do_delete() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function
# No args expected

  case $SUBCOMMAND in
    cluster) do_delete_cluster_sanity_checks || return $?
             do_delete_cluster_mutate
             ;;
  esac
}

# ---------------------------------------------------------------------------
do_delete_cluster_sanity_checks() {
# ---------------------------------------------------------------------------
# Deletes a mok cluster. All user vars have been parsed and saved.
# Globals: DELETE_CLUSTER_NAME
# No args expected

  if [[ -z $DELETE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to delete."
    return $ERROR
  fi
}

# ===========================================================================
#                                MUTATIONS
#                FUNCTIONS IN THIS SECTION CHANGE SYSTEM STATE
# ===========================================================================

# ---------------------------------------------------------------------------
do_create_cluster_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.
# Global variables: 
#   CREATE_CLUSTER_NAME        - (string) cluster name
#   CREATE_CLUSTER_NUM_MASTERS - (int) num masters
#   CREATE_CLUSTER_NUM_WORKERS - (int) num workers

  declare -i numnodes=0

  numnodes=$(get_cluster_size $CREATE_CLUSTER_NAME) || return $?

  [[ $numnodes -gt 0 ]] && {
    echo
    echo "ERROR: Cluster, '$CREATE_CLUSTER_NAME', exists! Aborting."
    echo
    return $ERROR
  }

  [[ $CREATE_CLUSTER_NUM_MASTERS -gt 0 ]] && {
    create_master_nodes $CREATE_CLUSTER_NUM_MASTERS || return $?
  }

  [[ $CREATE_CLUSTER_NUM_WORKERS -gt 0 ]] && {
    create_worker_nodes $CREATE_CLUSTER_NUM_WORKERS || return $?
  }

  return $OK
}

# ---------------------------------------------------------------------------
do_delete_cluster_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.

  :

  # Delete master node(s)

  # Delete worker node(s)
}

# ---------------------------------------------------------------------------
do_build_image_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.
# Builds the $BASEIMAGENAME base image used for masters and workers.
# Globals: None
# No args expected

  local retval=0

  build_container_image
  retval=$?

  if [[ $retval -eq 0 ]]; then
    : # We only need the tick
  else
    echo "Image build failed"
  fi

  return $retval
}

# ---------------------------------------------------------------------------
do_get_clusters_nomutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes but this one doesn't and I don't
#  know where to put it yet.
# Gets cluster details
# Globals: None
# Args
#   arg1 - cluster name, optional

  local id output clustname=$1
  declare -a nodes

  [[ -n $clustname ]] && clustname="=$clustname"

  output=$(get_mok_cluster_docker_ids "$clustname") || return $?

  if [[ -z $output ]]; then
    return $OK
  fi

  readarray nodes <<<$output

  # Use 'docker inspect' to get the value of the label $LABELKEY

  for id in ${nodes[@]}; do
    output=$(get_info_about_container_using_docker $id) || return $?
    sed -rn '/Labels/,/}/ {s/[":,]//g; s/^ *'"$LABELKEY"' ([^ ]*).*/\1/p }' \
      <<<$output
  done
}

# ===========================================================================
# FUNCTIONS BELOW ARE HELPERS FOR do_get_clusters_nomutate()
# ===========================================================================

# ---------------------------------------------------------------------------
get_mok_cluster_docker_ids() {
# ---------------------------------------------------------------------------
# Use 'docker ps .. label= ..' to get a list of mok clusters
# Args
#   arg1 - mok cluster name, optional

  docker ps -a -f label=$LABELKEY$1 -q || {
    echo "ERROR: docker failed\n" >/dev/stderr
    return $ERROR
  }
}

# ---------------------------------------------------------------------------
get_info_about_container_using_docker() {
# ---------------------------------------------------------------------------
# Use 'docker inspect $id' to get details about container $id
# Args
#   arg1 - docker container id

  docker inspect $1 || {
    echo -e "\nERROR: docker failed\n" >/dev/stderr
    return $ERROR
  }
}

# ===========================================================================
# FUNCTIONS BELOW ARE HELPERS FOR do_create_cluster_mutate()
# ===========================================================================

# ---------------------------------------------------------------------------
get_cluster_size() {
# ---------------------------------------------------------------------------
# Search for an existing cluster using labels. All cluster nodes are
# labelled with $LABELKEY=$CREATE_CLUSTER_NAME
# Args:
#   arg1 - name to search for.

  declare -a nodes

  readarray nodes < <(docker ps -a -f label=$LABELKEY=$1 -q) || return $?

  echo "${#nodes[*]}"
}

# ---------------------------------------------------------------------------
create_master_nodes() {
# ---------------------------------------------------------------------------
# Create the master nodes
# Args:
#   arg1 - number of master nodes to create

  declare -i i=0
  local retval=0

  for i in $(seq 1 $1); do
    run_with_progress \
      "    Creating base container, '$CREATE_CLUSTER_NAME-master-$i'" \
      docker run --privileged \
          -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
          -v /lib/modules:/lib/modules:ro \
          --tmpfs /run --tmpfs /tmp \
          --detach \
          --name $CREATE_CLUSTER_NAME-master-$i \
          --hostname $CREATE_CLUSTER_NAME-master-$i \
          --label $LABELKEY=$CREATE_CLUSTER_NAME \
          local/$BASEIMAGENAME

    retval=$?
    [[ $retval -ne 0 ]] && {
      echo "ERROR: Docker returned an error, shown below"
      echo
      cat $RUNWITHPROGRESS_OUTPUT
      rm $RUNWITHPROGRESS_OUTPUT
      echo
      return $ERROR
    }
  done

  return $retval
}

# ---------------------------------------------------------------------------
create_worker_nodes() {
# ---------------------------------------------------------------------------
# Create the master nodes
# Args:
#   arg1 - number of master nodes to create

  declare -i i=0
  local retval=0

  for i in $(seq 1 $1); do
    run_with_progress \
      "    Creating base container, '$CREATE_CLUSTER_NAME-worker-$i'" \
      docker run --privileged \
          -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
          -v /lib/modules:/lib/modules:ro \
          --tmpfs /run --tmpfs /tmp \
          --detach \
          --name $CREATE_CLUSTER_NAME-worker-$i \
          --hostname $CREATE_CLUSTER_NAME-worker-$i \
          --label $LABELKEY=$CREATE_CLUSTER_NAME \
          local/$BASEIMAGENAME

    retval=$?
    [[ $retval -ne 0 ]] && {
      echo "ERROR: Docker returned an error, shown below"
      echo
      cat $RUNWITHPROGRESS_OUTPUT
      rm $RUNWITHPROGRESS_OUTPUT
      echo
      return $ERROR
    }
  done

  return $retval
}

# ===========================================================================
# FUNCTIONS BELOW ARE HELPERS FOR do_delete_cluster_mutate()
# ===========================================================================

# ===========================================================================
# FUNCTIONS BELOW ARE HELPERS FOR do_build_image_mutate()
# ===========================================================================

# ---------------------------------------------------------------------------
build_container_image() {
# ---------------------------------------------------------------------------
# Creates the docker build directory in $DOCKERBUILDTMPDIR then calls
# docker build to build the image.
# No args expected.

  create_docker_build_dir

  run_with_progress \
      "    Creating base image, '$BASEIMAGENAME'" \
      docker build -t "local/$BASEIMAGENAME" "$DOCKERBUILDTMPDIR/$BASEIMAGENAME"
  
  retval=$?
  [[ $retval -ne 0 ]] && {
    echo "ERROR: Docker returned an error, shown below"
    echo
    cat $RUNWITHPROGRESS_OUTPUT
    echo
    return $ERROR
  }

  return $retval
}

# ---------------------------------------------------------------------------
create_docker_build_dir() {
# ---------------------------------------------------------------------------
# Creates a docker build directory in /var/tmp/tmp.XXXXXXXX
# No args expected

  DOCKERBUILDTMPDIR=`mktemp -d --tmpdir=/var/tmp`

  # The following comments should not be removed or changed.
  # embed-dockerfile.sh adds a base64 encoded tarball and
  #  unpacking code between them.

  #mok-centos-7-tarball-start 
  #mok-centos-7-tarball-end
}

# ===========================================================================
# FUNCTIONS FOR PARSING THE COMMAND LINE BELOW
# ===========================================================================

# ---------------------------------------------------------------------------
parse_options() {
# ---------------------------------------------------------------------------
# Uses a state machine to check all command line arguments
# Args:
#   arg1 - The arguments given to mokctl by the user on the command line

  set -- "$@"
  local ARGN=$#
  while [ "$ARGN" -ne 0 ]
  do
    case $1 in
      -h) usage
          return $OK
      ;;
      ?*) case "$STATE" in
            COMMAND) check_command_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid COMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                   COMMAND="$1"
                 ;;
            SUBCOMMAND) check_subcommand_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid SUBCOMMAND for $COMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            OPTION) check_option_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            OPTION2) check_option2_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            OPTION3) check_option3_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     return $ERROR
                   }
                 ;;
            END) usage
                 echo -n "ERROR No more options expected, '$1' is unexpected"
                 echo " for '$COMMAND $SUBCOMMAND'"
                 return $ERROR
                 ;;
            ?*) echo "Internal ERROR. Invalid state '$STATE'"
                return $ERROR
          esac
      ;;
    esac
    shift 1
    ARGN=$((ARGN-1))
  done

  [[ -z $COMMAND ]] && {
    usage
    echo "No COMMAND supplied"
    return $ERROR
  }
  [[ -z $SUBCOMMAND ]] && {
    usage
    echo "No SUBCOMMAND supplied"
    return $ERROR
  }

  return $OK
}

# ---------------------------------------------------------------------------
check_command_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in command state
# Args:
#   arg1 - token

  case $1 in
    create) COMMAND=create
      ;;
    delete) COMMAND=delete
      ;;
    build)  COMMAND=build
      ;;
    get)    COMMAND=get
      ;;
    ?*) return $ERROR
      ;;
  esac
  STATE="SUBCOMMAND"
}

# ---------------------------------------------------------------------------
check_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $COMMAND in
    create) check_create_subcommand_token $1 ;;
    delete) check_delete_subcommand_token $1 ;;
    build)  check_build_subcommand_token $1  ;;
    get)    check_get_subcommand_token $1  ;;
  esac
}

# ---------------------------------------------------------------------------
check_create_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE="OPTION"

  return $OK
}

# ---------------------------------------------------------------------------
check_delete_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE=OPTION
}

# ---------------------------------------------------------------------------
check_build_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    image) SUBCOMMAND="image"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE=END
}

# ---------------------------------------------------------------------------
check_get_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    clusters) ;&
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE=OPTION
}

# ---------------------------------------------------------------------------
check_option_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NAME="$1"
          STATE="OPTION2"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) DELETE_CLUSTER_NAME="$1"
          STATE="END"
          ;;
      esac
      ;;
    get)
      case $SUBCOMMAND in
        cluster) GET_CLUSTER_NAME="$1"
          STATE="END"
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option2_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option2 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_MASTERS="$1"
          STATE="OPTION3"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option3_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option3 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_WORKERS="$1"
          STATE="END"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ===========================================================================
# HELPERS
# ===========================================================================

# ---------------------------------------------------------------------------
run_with_progress() {
# ---------------------------------------------------------------------------
# Display a progress spinner, display text, display a tick or cross based
# on the exit code.
# Args:
#   arg1 - the text to display
#   argN - remaining args are the program and its arguments

  local displaytext=$1
  declare -g RUNWITHPROGRESS_OUTPUT=`mktemp --tmpdir=/var/tmp`

  shift
  # Run the command
  $@ &>$RUNWITHPROGRESS_OUTPUT &
  # Turn the cursor off
  tput civis

  # Start the spin animation
  echo -n "$displaytext"
  ( while true; do
    for i in {0..3}; do
      echo -en "\r  ${SPINNER[i]} "
      sleep .1
    done
  done ) & 

  # Wait for the command to finish
  wait %1

  retval=$?
  if [[ $retval -eq 0 ]]; then
    echo -e "\r  $success"
  else
    echo -e "\r  $failure"
  fi

  # Kill the spinner
  kill %2
  # Restore the cursor
  tput cnorm

  return $retval
}

# ---------------------------------------------------------------------------
sanity_checks(){
# ---------------------------------------------------------------------------
# Check our environment
# No args expected

  for binary in tput docker grep sed; do
    if ! which $binary >& /dev/null; then
      echo "ERROR: $binary binary not found in path. Aborting."
      return 1
    fi
  done
}

# ---------------------------------------------------------------------------
create_command_help() {
# ---------------------------------------------------------------------------
  echo "create SUBCOMMANDs are:"
  echo
  echo "  cluster - Create a local kubernetes cluster."
  echo
  echo "create cluster options:"
  echo
  echo " Format:"
  echo "  create cluster NAME NUM_MASTERS NUM_WORKERS"
  echo "  NAME        - The name of the cluster. This will be used as"
  echo "                the prefix in the name for newly created"
  echo "                docker containers."
  echo "  NUM_MASTERS - The number of master containers."
  echo "  NUM_WORKERS - The number of worker containers."
  echo
}

# ---------------------------------------------------------------------------
delete_command_help() {
# ---------------------------------------------------------------------------
  echo "delete SUBCOMMANDs are:"
  echo
  echo "  cluster - Delete a local kubernetes cluster."
  echo
  echo "delete cluster options:"
  echo
  echo " Format:"
  echo "  delete cluster NAME"
  echo "  NAME        - The name of the cluster to delete"
  echo
}

# ---------------------------------------------------------------------------
build_command_help() {
# ---------------------------------------------------------------------------
  echo "build SUBCOMMANDs are:"
  echo
  echo "  image - Creates the $BASEIMAGENAME base image."
  echo
  echo "build image options:"
  echo
  echo " Format:"
  echo "  build image"
  echo
}

# ---------------------------------------------------------------------------
get_command_help() {
# ---------------------------------------------------------------------------
  echo "get SUBCOMMANDs are:"
  echo
  echo "  cluster(s) - list all mokctl managed clusters."
  echo
  echo "get cluster(s) options:"
  echo
  echo " Format:"
  echo "  get cluster(s) [NAME]"
  echo "  NAME        - (optional) The name of the cluster to get"
  echo "                details about."
  echo
}

# ---------------------------------------------------------------------------
usage() {
# ---------------------------------------------------------------------------
# Every tool, no matter how small, should have help text!

  case $COMMAND in
    create) create_command_help; return 0 ;;
    delete) delete_command_help; return 0 ;;
    build) build_command_help; return 0 ;;
    get) get_command_help; return 0 ;;
  esac

  echo
  echo "Usage: mokctl [-h] <COMMAND> <SUBCOMMAND> [SUBCOMMAND_OPTIONS...]"
  echo
  echo "Global options:"
  echo
  echo "  -h - This help text"
  echo
  echo "Where COMMAND can be one of:"
  echo
  echo "  create - Add item(s) to the system."
  echo "  delete - Delete item(s) from the system."
  echo "  build  - Build item(s) used by the system."
  echo "  get    - Get details about items in the system."
  echo
  
  create_command_help
  delete_command_help
  build_command_help
  get_command_help

  echo "EXAMPLES"
  echo
  echo "Build the image used for masters and workers:"
  echo
  echo "  mokctl build image"
  echo
  echo "Create a single node cluster:"
  echo "Note that the master node will be made schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 0"
  echo
  echo "Create a single master and single node cluster:"
  echo "Note that the master node will NOT be schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 1"
  echo
  echo "Delete a cluster:"
  echo
  echo "  mokctl delete cluster mycluster"
  echo
}

# ---------------------------------------------------------------------------
cleanup() {
# ---------------------------------------------------------------------------
# Called when the script exits.

  [[ -e "$DOCKERBUILDTMPDIR" ]] && \
    [[ $DOCKERBUILDTMPDIR == "/var/tmp/"* ]] && {
    rm -rf "$DOCKERBUILDTMPDIR"
  }

  # If progress spinner crashed make sure the cursor is shown
  tput cnorm

  # Kill the spinny, and anything else, if they're running
  for i in `jobs -p`; do kill $i; echo -e "$colred\r  ✕$colreset" ; done
}

# Calls main() if we're called from the command line
if ([ "$0" = "$BASH_SOURCE" ] || ! [ -n "$BASH_SOURCE" ]);
then
  main "$@"
fi

# vim:ft=bash:sw=2:et:ts=2:
