#!/usr/bin/env bash

# ===========================================================================
# GLOBALS
# ===========================================================================
# Don't change any globals

# The initial state for the state machine
STATE="COMMAND"

ERROR=1
OK=0

COMMAND=
SUBCOMMAND=

CREATE_CLUSTER_NAME=
CREATE_CLUSTER_NUM_MASTERS=
CREATE_CLUSTER_NUM_WORKERS=

DELETE_CLUSTER_NAME=

TMPDIR=

# ===========================================================================
main() {
# ===========================================================================
# Execution begins here

  trap cleanup EXIT

  parse_options "$@"

  case "$COMMAND" in
    create) do_create ;;
    delete) do_delete ;;
  esac

  exit 0
}

# ===========================================================================
# MOKCTL CREATE
# ===========================================================================

# ---------------------------------------------------------------------------
do_create() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function

  case $SUBCOMMAND in
    cluster) do_create_cluster_sanity_checks
             do_create_cluster_mutate ;;
  esac
}

# ---------------------------------------------------------------------------
do_create_cluster_sanity_checks() {
# ---------------------------------------------------------------------------
# Creates a mok cluster. All user vars have been parsed and saved.
# Globals: CREATE_CLUSTER_NAME CREATE_CLUSTER_NUM_MASTERS
#          CREATE_CLUSTER_NUM_WORKERS
# No args expected

  if [[ -z $CREATE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to create."
    exit $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_MASTERS || $CREATE_CLUSTER_NUM_MASTERS -le 0 ]]; then
    usage
    echo "Please provide the number of Masters to create. Must be 1 or more."
    exit $ERROR
  fi

  if [[ -z $CREATE_CLUSTER_NUM_WORKERS ]]; then
    usage
    echo "Please provide the number of Workers to create."
    exit $ERROR
  fi
}

# ===========================================================================
# MOKCTL DELETE
# ===========================================================================

# ---------------------------------------------------------------------------
do_delete() {
# ---------------------------------------------------------------------------
# Calls the correct command/subcommand function
# No args expected

  case $SUBCOMMAND in
    cluster) do_delete_cluster_sanity_checks
             do_delete_cluster_mutate ;;
  esac
}

# ---------------------------------------------------------------------------
do_delete_cluster_sanity_checks() {
# ---------------------------------------------------------------------------
# Deletes a mok cluster. All user vars have been parsed and saved.
# Globals: DELETE_CLUSTER_NAME
# No args expected

  if [[ -z $DELETE_CLUSTER_NAME ]]; then
    usage
    echo "Please provide the Cluster NAME to delete."
    exit $ERROR
  fi

  # Delete worker nodes

  # Delete master nodes
}

# ===========================================================================
#                                MUTATIONS
#                CODE IN THIS SECTION CHANGE SYSTEM STATE
# ===========================================================================

# ---------------------------------------------------------------------------
do_create_cluster_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.

  :

  # Create master node(s)

  # Create worker node(s)
}

# ---------------------------------------------------------------------------
do_delete_cluster_mutate() {
# ---------------------------------------------------------------------------
# Mutate functions make system changes.

  :

  # Create master node(s)

  # Create worker node(s)
}

# ===========================================================================
# FUNCTIONS FOR PARSING THE COMMAND LINE BELOW
# ===========================================================================

# ---------------------------------------------------------------------------
parse_options() {
# ---------------------------------------------------------------------------
# Uses a state machine to check all command line arguments
# Args:
#   arg1 - The arguments given to mokctl by the user on the command line

  set -- "$@"
  local ARGN=$#
  while [ "$ARGN" -ne 0 ]
  do
    case $1 in
      -h) usage
          exit 0
      ;;
      ?*) case "$STATE" in
            COMMAND) check_command_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid COMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                   COMMAND="$1"
                 ;;
            SUBCOMMAND) check_subcommand_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid SUBCOMMAND for $COMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                   SUBCOMMAND="$1"
                 ;;
            OPTION) check_option_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                 ;;
            OPTION2) check_option2_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                 ;;
            OPTION3) check_option3_token $1
                   [[ $? -eq $ERROR ]] && {
                     usage
                     echo "Invalid OPTION for $COMMAND $SUBCOMMAND, '$1'."
                     echo
                     exit $ERROR
                   }
                 ;;
            END) usage
                 echo -n "ERROR No more options expected, '$1' is unexpected"
                 echo " for '$COMMAND $SUBCOMMAND'"
                 exit $ERROR
                 ;;
            ?*) echo "Internal ERROR. Invalid state '$STATE'"
                exit $ERROR
          esac
      ;;
    esac
    shift 1
    ARGN=$((ARGN-1))
  done

  [[ -z $COMMAND ]] && {
    usage
    echo "No COMMAND supplied"
    exit $ERROR
  }
  [[ -z $SUBCOMMAND ]] && {
    usage
    echo "No SUBCOMMAND supplied"
    exit $ERROR
  }
}

# ---------------------------------------------------------------------------
check_command_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in command state
# Args:
#   arg1 - token

  case $1 in
    create) COMMAND=create
      ;;
    delete) COMMAND=delete
      ;;
    ?*) return $ERROR
      ;;
  esac
  STATE="SUBCOMMAND"
}

# ---------------------------------------------------------------------------
check_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $COMMAND in
    create) check_create_subcommand_token $1 ;;
    delete) check_delete_subcommand_token $1 ;;
  esac
}

# ---------------------------------------------------------------------------
check_create_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE="OPTION"

  return $OK
}

# ---------------------------------------------------------------------------
check_delete_subcommand_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in subcommand state
# Args:
#   arg1 - token

  case $1 in
    cluster) SUBCOMMAND="cluster"
      ;;
    ?*) return $ERROR
      ;;
  esac

  STATE=OPTION
}

# ---------------------------------------------------------------------------
check_option_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NAME="$1"
          STATE="OPTION2"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) DELETE_CLUSTER_NAME="$1"
          STATE="END"
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option2_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option2 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_MASTERS="$1"
          STATE="OPTION3"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
check_option3_token() {
# ---------------------------------------------------------------------------
# Check for a valid token in option3 state
# Args:
#   arg1 - token

  case $COMMAND in
    create)
      case $SUBCOMMAND in
        cluster) CREATE_CLUSTER_NUM_WORKERS="$1"
          STATE="END"
          ;;
      esac
      ;;
    delete)
      case $SUBCOMMAND in
        cluster) return $ERROR
          ;;
      esac
      ;;
  esac
}

# ---------------------------------------------------------------------------
usage() {
# ---------------------------------------------------------------------------
# Every tool, no matter how small, should have help text!

  echo
  echo "Usage: mokctl [-h] <COMMAND> <SUBCOMMAND> [SUBCOMMAND_OPTIONS...]"
  echo
  echo "Global options:"
  echo
  echo "  -h - This help text"
  echo
  echo "Where COMMAND can be one of:"
  echo
  echo "  create"
  echo "  delete"
  echo
  echo "create SUBCOMMANDs:"
  echo
  echo "  cluster - Create a local kubernetes cluster."
  echo
  echo "create cluster options:"
  echo
  echo " Format:"
  echo
  echo "  create cluster NAME NUM_MASTERS NUM_WORKERS"
  echo
  echo "  NAME        - The name of the cluster. This will be used as"
  echo "                the prefix in the name for newly created"
  echo "                docker containers."
  echo "  NUM_MASTERS - The number of master containers."
  echo "  NUM_WORKERS - The number of worker containers."
  echo
  echo "delete SUBCOMMANDs:"
  echo
  echo "  cluster - Create a local kubernetes cluster."
  echo
  echo "delete cluster options:"
  echo
  echo " Format:"
  echo
  echo "  delete cluster NAME"
  echo
  echo "  NAME        - The name of the cluster to delete"
  echo
  echo "EXAMPLES"
  echo
  echo "Create a single node cluster:"
  echo "Note that the master node will be made schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 0"
  echo
  echo "Create a single master and single node cluster:"
  echo "Note that the master node will NOT be schedulable for pods."
  echo
  echo "  mokctl create cluster mycluster 1 1"
  echo
  echo "Delete a cluster:"
  echo
  echo "  mokctl delete cluster mycluster"
  echo
}

# ===========================================================================
# HELPERS
# ===========================================================================

# ---------------------------------------------------------------------------
cleanup() {
# ---------------------------------------------------------------------------

    [[ -e "$TMPDIR" ]] && [[ $TMPDIR == "/var/tmp/"* ]] && {
      echo "Deleting $TMPDIR"
      rm -rf "$TMPDIR"
    }
}

# ===========================================================================
# IMAGE BUILDER
# ===========================================================================

# ---------------------------------------------------------------------------
build_container_image() {
# ---------------------------------------------------------------------------
:
}

# ---------------------------------------------------------------------------
create_docker_build_dir() {
# ---------------------------------------------------------------------------
# Creates a docker build directory in /var/tmp/tmp.XXXXXXXX
# No args expected

	TMPDIR=`mktemp -d --tmpdir=/var/tmp`

  # The following comments should not be removed or changed.
  # embed-dockerfile.sh adds a base64 encoded tarball and
  #  unpacking code between them.

  #mok-centos-7-tarball-start 
  cat <<EnD | base64 -d | tar xz -C $TMPDIR 
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
EnD
  #mok-centos-7-tarball-end
}

# Calls main() if we're called from the command line
if ([ "$0" = "$BASH_SOURCE" ] || ! [ -n "$BASH_SOURCE" ]);
then
  main "$@"
fi

# vim:ft=bash:sw=2:et:ts=2:
